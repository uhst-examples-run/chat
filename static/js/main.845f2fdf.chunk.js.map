{"version":3,"sources":["MessageForm.js","Message.js","MessageList.js","Chat.js","App.js","registerServiceWorker.js","index.js"],"names":["MessageForm","componentDidMount","_this","input","focus","handleFormSubmit","event","preventDefault","props","onMessageSend","value","_this2","this","react_default","a","createElement","className","onSubmit","type","ref","node","placeholder","Component","Message","classes","classNames","log","author","me","concat","timestamp","getHours","getMinutes","body","MessageList","componentDidUpdate","scrollTop","scrollHeight","messages","map","message","i","src_Message_0","Object","assign","key","defaultProps","Chat","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","client","promptForNickname","hint","initial","nickname","prompt","handleNewMessage","text","send","JSON","stringify","command","state","joined","id","match","params","uhst","UHST","join","on","json","parse","setState","toConsumableArray","Date","console","error","InvalidHostId","alert","history","push","err","Fragment","src_MessageList_0","src_MessageForm_0","withRouter","App","clients","host","startHosting","HostIdAlreadyInUse","hostId","uhstSocket","broadcast","remoteId","nicknameTaken","_i","_Object$keys","keys","length","clientId","now","react_router_dom","react_router","exact","path","to","render","component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.845f2fdf.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport './MessageForm.css'\n\nclass MessageForm extends Component {\n  static propTypes = {\n    onMessageSend: PropTypes.func.isRequired,\n  }\n\n  componentDidMount = () => {\n    this.input.focus()\n  }\n\n  handleFormSubmit = (event) => {\n    event.preventDefault()\n    this.props.onMessageSend(this.input.value)\n    this.input.value = \"\"\n  }\n\n  render() {\n    return (\n      <form className=\"MessageForm\" onSubmit={this.handleFormSubmit}>\n        <div className=\"input-container\">\n          <input\n            type=\"text\"\n            ref={(node) => (this.input = node)}\n            placeholder=\"Enter your message...\"\n          />\n        </div>\n        <div className=\"button-container\">\n          <button type=\"submit\">\n            Send\n          </button>\n        </div>\n      </form>\n    )\n  }\n}\n\nexport default MessageForm\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from \"classnames\"\nimport './Message.css'\n\nclass Message extends Component {\n  static propTypes = {\n    timestamp: PropTypes.instanceOf(Date),\n    author: PropTypes.string,\n    body: PropTypes.string.isRequired,\n    me: PropTypes.bool,\n  }\n\n  render() {\n    const classes = classNames('Message', {\n      log: !this.props.author,\n      me: this.props.me\n    })\n\n    return (\n      <div className={classes}>\n        {`[${this.props.timestamp.getHours()}:${this.props.timestamp.getMinutes()}] `}\n        {this.props.author && (\n          <span className=\"author\">&lt;{this.props.author}&gt;</span>\n        )}\n        {this.props.body}\n      </div>\n    )\n  }\n}\n\nexport default Message\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport Message from './Message'\nimport './MessageList.css'\n\nclass MessageList extends Component {\n  static propTypes = {\n    messages: PropTypes.arrayOf(PropTypes.object)\n  }\n\n  static defaultProps = {\n    messages: [],\n  }\n\n  componentDidUpdate = () => {\n    this.node.scrollTop = this.node.scrollHeight\n  }\n\n  render() {\n    return (\n      <div className=\"MessageList\" ref={(node) => (this.node = node)}>\n        {this.props.messages.map((message, i) => (\n          <Message key={i} {...message} />\n        ))}\n      </div>\n    )\n  }\n}\n\nexport default MessageList\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router';\nimport MessageForm from './MessageForm';\nimport MessageList from './MessageList';\nimport { UHST, InvalidHostId } from 'uhst';\nimport './Chat.css';\n\nclass Chat extends Component {\n  client = null;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      joined: false,\n      nickname: null,\n      messages: [],\n    };\n  }\n\n  componentDidMount() {\n    const id = this.props.match.params.id;\n    const uhst = new UHST();\n    try {\n      this.client = uhst.join(id);\n      this.client.on('open', () => {\n        const nickname = this.promptForNickname();\n        this.client.send(\n          JSON.stringify({\n            command: 'set_nickname',\n            nickname,\n          })\n        );\n      });\n      this.client.on('message', (json) => {\n        const message = JSON.parse(json);\n        switch (message.event) {\n          case 'new_message':\n            this.setState({\n              messages: [\n                ...this.state.messages,\n                {\n                  timestamp: new Date(message.timestamp),\n                  me: message.author === this.state.nickname,\n                  author: message.author,\n                  body: message.body,\n                },\n              ],\n            });\n            break;\n          case 'nickname_taken':\n            const nickname = this.promptForNickname(\n              'Nickname already taken. Please choose a new one:',\n              message.nickname\n            );\n            this.client.send(\n              JSON.stringify({\n                command: 'set_nickname',\n                nickname,\n              })\n            );\n            break;\n          case 'room_joined':\n            this.setState({\n              joined: true,\n              nickname: message.nickname,\n            });\n            break;\n          default:\n            console.log(`Unsupported event: ${message.event}.`);\n        }\n      });\n      this.client.on('error', (error) => {\n        if (error instanceof InvalidHostId) {\n          alert('There is no host for this room. You will become the host.');\n          this.props.history.push(`/new/${id}`);\n        }\n      });\n      this.client.on('close', () => {\n        this.setState({\n          joined: false,\n          messages: [...this.state.messages, { timestamp: new Date(), body: `Host left the room.` }],\n        });\n      });\n    } catch (err) {\n      this.setState({\n        messages: [\n          ...this.state.messages,\n          { timestamp: new Date(), body: `Client received error: ${err}` },\n        ],\n      });\n    }\n  }\n\n  promptForNickname = (hint, initial) => {\n    if (!hint) {\n      hint = 'Please enter your nickname:';\n    }\n    let nickname = prompt(hint, initial);\n    while (!nickname) {\n      nickname = prompt('Nickname is required:');\n    }\n    return nickname;\n  };\n\n  handleNewMessage = (text) => {\n    this.client.send(\n      JSON.stringify({\n        command: 'new_message',\n        body: text,\n      })\n    );\n  };\n\n  render() {\n    const id = this.props.match.params.id;\n\n    return (\n      <>\n        <h3>Room: {id} . Copy and share the URL to join.</h3>\n        <div className=\"Chat\">\n          <MessageList messages={this.state.messages} />\n          {this.state.joined ? (\n            <MessageForm onMessageSend={this.handleNewMessage} />\n          ) : null}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default withRouter(Chat);\n","import React, { Component } from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\nimport { UHST, HostIdAlreadyInUse } from 'uhst';\nimport Chat from './Chat';\n\nclass App extends Component {\n  clients = {};\n  host = null;\n\n  startHosting = (props) => {\n    const id = props.match.params.id;\n    const uhst = new UHST();\n    this.host = uhst.host(id);\n    this.host.on('error', function(error) {\n      if (error instanceof HostIdAlreadyInUse) {\n        alert('This room already has a host. You will join.');\n        props.history.push(`/room/${id}`);\n      }\n    });\n    this.host.on('ready', () => {\n      props.history.push(`/room/${this.host.hostId}`);\n    });\n    this.host.on('connection', (uhstSocket) => {\n      uhstSocket.on('message', (json) => {\n        const message = JSON.parse(json);\n        switch (message.command) {\n          case 'new_message':\n            this.broadcast(this.clients[uhstSocket.remoteId], message.body);\n            break;\n          case 'set_nickname':\n            const nickname = message.nickname;\n            let nicknameTaken = false;\n            for (const clientId of Object.keys(this.clients)) {\n              nicknameTaken = this.clients[clientId] === nickname;\n              if (nicknameTaken) {\n                break;\n              }\n            }\n            if (nicknameTaken) {\n              uhstSocket.send(\n                JSON.stringify({\n                  event: 'nickname_taken',\n                  timestamp: Date.now(),\n                  nickname,\n                })\n              );\n            } else {\n              uhstSocket.send(\n                JSON.stringify({\n                  event: 'room_joined',\n                  timestamp: Date.now(),\n                  nickname,\n                })\n              );\n              this.clients[uhstSocket.remoteId] = nickname;\n              this.broadcast(\n                null,\n                `*** ${this.clients[uhstSocket.remoteId]} (${\n                  uhstSocket.remoteId\n                }) joined the room.`\n              );\n            }\n            break;\n          default:\n            console.log(`Unsupported command: ${message.command}.`);\n        }\n      });\n      uhstSocket.on('close', () => {\n        this.broadcast(\n          null,\n          `*** ${this.clients[uhstSocket.remoteId]} (${\n            uhstSocket.remoteId\n          }) left the room.`\n        );\n        delete this.clients[uhstSocket.remoteId];\n      });\n    });\n  };\n\n  broadcast = (author, body) => {\n    this.host.broadcast(\n      JSON.stringify({\n        event: 'new_message',\n        timestamp: Date.now(),\n        author,\n        body,\n      })\n    );\n  };\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <Switch>\n            <Route exact path=\"/\">\n              <Redirect to=\"/new\" />\n            </Route>\n            <Route path=\"/new/:id?\" render={this.startHosting} />\n            <Route path=\"/room/:id\" component={Chat} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}